
2.4 乱択アルゴリズムとアドバーザリモデル
=========================================================


(そもそも乱択アルゴリズムとは)
------------------------------------------------------------

* 全体を把握するための乱択アルゴリズム

  * 全体を捕らえたいが、全体があまりにも大きくて把握が困難な場合にランダムサンプリングを行う

* 最悪を回避するための乱択アルゴリズム

  * Quick Sortのピボットの乱択

* 多数の証拠を得るための乱択アルゴリズム

  * 確率的素数判定。出力は「確実に合成数である」または「おそらく素数である（判定失敗確率付）になる。

などなど。今回のは2番めの「入力に依存して最悪の事態に陥るのを回避する」目的での乱択アルゴリズム採用（たぶん）。

アドバーザリ (Adversary)
---------------------------------------------------------
* Adversary: 敵、競争相手

* Adaptive Adversary: 実行時の挙動を見てそれに対抗する策を講じる

  * [AOFF] Adaptive offline model: Adaptive Adversary + 最適offline algorithm. すべてのdataが揃ってから対策を講じる. 最強.
  * [AON] Adaptive online model: Adaptive Adversary + online algorithm. onlineでdataを参照しつつ対策を講じる. まあまあ.

* [OBL] Oblivious Adversary: 実行プログラムを見て、それに対抗する策を事前に作成する. 最弱.

[定理 2.10]
   任意のオンライン問題に対し、モデル :math:`M` に対する乱択アルゴリズム ALGの競合比の期待値を :math:`\bar{R}_M ({\rm ALG})` とすると、
.. math::
   \bar{R}_{\rm OBL}({\rm ALG}) \leq \bar{R}_{\rm AON}({\rm ALG}) \leq \bar{R}_{\rm AOFF}({\rm ALG})

2.4.1 乱択アルゴリズムの設計
-----------------------------------------------------------
レンタルスキー再掲
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
スキー板の値段を :math:`X` , レンタル料を :math:`Y` , :math:`r=X/Y` とする。

:math:`k` 回目のスキーのときに、スキー板を買ったとして、買えばよかった、となる後悔度合い。

.. math::

	 \frac{(k-1)Y + X}{X}

:math:`k` 回目のスキーのときに、スキー板を買ったとして、レンタルしておけばよかった、となる後悔度合い。

.. math::

	 \frac{(k-1)Y + X}{kY}

これらが等しいときに競合比は最小となり、その時の :math:`k` の値は

.. math::

	 X &= kY \\
	 k &= r

であり、競合比の値は以下となる。

.. math::
	 \frac{(k-1) + X/Y}{X/Y} &= \frac{r-1+r}{r} \\
	 &= \frac{2r - 1}{r} = 2 - r^{-1}


乱択レンタルスキー
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* 以前の例では :math:`r=X/Y` の時に購入する戦略
* 今回は、適当な回数行ったところでスキーを買う。その戦略としては :math:`m+1` 回目から :math:`r` 回目の間で、スキー板を買う日をランダムに確率 :math:`1/(r-m) = 2/r` で決めて、その日に購入する。

..
  * :math:`r=2m` と置いた意味は?
    * 決定的アルゴリズム(?)に従った場合に、競合比を最小にするスキー板を買う日（回目）が :math:`r` である。
    * :math:`r = 2m` は、スキー購入日の選択範囲を、その決定的アルゴリズムの場合に競合比最小とするスキー購入日（回目）以下、かつその半分よりも大きな日とすること。
    * だから?


.. figure:: img/buy_ski_blade.png
    :width: 600px



期待値
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
* 費用の期待値を考える。
* 合計 :math:`s` 回行くことになったとする。
*  :math:`m \leq r` の時に、最適オフラインアルゴリズムに従うと費用は :math:`sY` である。

:math:`s \leq m` の時には :math:`m < s \leq r` の時を考える。 :math:`i` が選ばれる確率は :math:`1/(r-m)=2/r` . そしてスキー板購入金額の期待値は

.. math::
   E_{\rm buy} &= \sum_{i = m + 1}^{s} X \frac{2}{r} \\
   &= \frac{2 (s - m) X}{r} \\
   &= (2s - r)Y

である。一方レンタルに使用する金額は :math:`i` 回目に購入するとすれば :math:`(i-1)Y` かかり、最終回までに購入しない場合は :math:`sY` かかる。その期待値は

.. math::
   E_{\rm rent} &= \sum_{i = m + 1}^{s} \frac{2}{r} (i - 1) Y + \frac{2}{r} (r - s)sY \\
   &= \frac{2}{r}\left(m + (m+1) + \cdots + (s - 1)\right)Y + \frac{2}{r}(r - s) sY \\
	 &= \frac{2}{r} \left( \frac{(s-1+m)(s-1-m)}{2} + \frac{s-1+m}{2} \right) + \frac{2}{r}(rs - s^2)Y \\
   &= \frac{1}{r}\left( -s^2 - s - m^2 + m + 2rs - 2s^2 \right)Y \\
   &= \frac{1}{r}\left( -s^2 - r^2/4 + 2rs - (s - m) \right) Y \\
   &= \frac{\left(-4s^2 + 8rs - r^2 - (s - m)\right)Y}{4r} \\
	 &\leq \frac{\left(-4s^2 + 8rs - r^2\right)Y}{4r} \qquad(\because (s - m) > 0)

である。以上から競合比は

.. math::
   \frac{(E_{\rm buy} + E_{\rm rent})}{sY} &= \left( (2s - r)Y + \frac{\left(-4s^2 + 8rs - r^2\right)Y}{4r} \right) / sY \\
   &= 2 - \frac{r}{s} - \frac{s}{r} + 2 - \frac{r}{4s} \\
	 &= 4 - \frac{5r}{4s} - \frac{s}{r} 

となる。 :math:`r=s` のときに最小であり（要確認）、そのときの値は7/4となり、以前の方式の2から7/4に減少させることができた。

演習問題 2.8
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
乱択範囲を初回からにするということ? ( :math:`m = 0` )



2.4.2 ページングにおける乱択アルゴリズム
---------------------------------------------------------------------

マーキングアルゴリズム
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ページがリクエストされたとき、そのページにマークをつける。
* 高速記憶装置がいっぱいになり、ページフォルトによる消去が必要になったとき、マークが付いてないページがあれば、マークのないページを1つ（もしくは複数）選び消去する。
* すべてのページにマークがついていれば、すべてのマークを解除して、どれかのページを消去する。
* 挙動は「LRU(Least-Recently-Used): 最近のページ要求が最も古いデータを削除する」と一致する
* 特に「マークの無いページから、ランダムに一つ選び消去する」という戦略を持つマーキングアルゴリズムを **Random Select Marking Algorithm: MARK** と呼ぶ。

演習問題 2.9
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

定理 2.11の定義と証明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
アルゴリズムMARKの競合比の期待値 :math:`\bar{R}_{\rm OBL}({\rm MARK})` は :math:`2H_k` 以下である。

定理 2.12の定義と証明
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
:math:`\bar{R}_{\rm OBL} ({\rm MARK})` は :math:`2H_k - 1` 以上である


2.4.3 乱択アルゴリズムの下界の証明
-----------------------------------------------------------------
* 乱択アルゴリズムで改良するのは **「最悪の入力に対する計算コスト」** であり、入力の平均を取った計算量(平均計算量: average complexity)の改善は難しい。
* 任意の乱択アルゴリズムは、乱数を固定すると決定性アルゴリズムになる。
* 任意の乱択アルゴリズムは、起こりうる乱数の組合せ(例: コインの表裏の可能な列の組合せ)数だけの種類の決定性アルゴリズムを用意し、そこから確率的にアルゴリズムを選ぶ、とみなすことができる。
* 故に平均計算量では、これらの用意された決定性アルゴリズムの平均計算量の重み付き平均になるので、ベストな決定性アルゴリズムの平均計算量に勝つことは不可能

2.4.4 リストアクセス問題における乱択アルゴリズム
------------------------------------------------------------------
* リストアクセス問題に対して、オブリビアスモデルでの競合比が、決定性アルゴリズムでの競合比の下界2を突破できるか否か

.. math::
   E(a_i) \leq k + \frac{3}{4} (k - 1) \leq \frac{7}{4} {\rm OPT}_i



