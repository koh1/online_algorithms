
乱択アルゴリズムとアドバーザリモデル
========================================


(番外）そもそも乱択アルゴリズムとは
-----------------------------------------

* 全体を把握するための乱択アルゴリズム

  * 全体を捕らえたいが、全体があまりにも大きくて把握が困難な場合にランダムサンプリングを行う

* 最悪を回避するための乱択アルゴリズム

  * Quick Sortのピボットの乱択

* 多数の証拠を得るための乱択アルゴリズム

  * 確率的素数判定。出力は「確実に合成数である」または「おそらく素数である（判定失敗確率付）になる。

などなど。

Adversary
-----------------------------------------
* Adaptive Adversary: 実行時の挙動を見てそれに対抗する策を講じる

  * ● Adaptive offline model: Adaptive Adversary + 最適offline algorithm. すべてのdataが揃ってから対策を講じる. 最強.
  * ● Adaptive online model: Adaptive Adversary + online algorithm. onlineでdataを参照しつつ対策を講じる. まあまあ.

* ● Oblivious Adversary: 実行プログラムを見て、それに対抗する策を事前に作成する. 最弱.



乱択アルゴリズムの設計
-----------------------------------------


.. math::
	 A = \frac{2(s-m)X}{r} = (2s - r)Y

.. math::
	 B = \frac{2}{r}( m + (m+1) + \cdots + (s-1))Y + \frac{2(r - s)}{r}sY \le \frac{(s^2-m^2 + 2rs - 2s^2)Y}{r}

ページングにおける乱択アルゴリズム
------------------------------------------

乱択アルゴリズムの下界の証明
------------------------------------------

リストアクセス問題における乱択アルゴリズム
------------------------------------------


XXを :math:`x_i` とする。

.. math::
   y(x) = \sum_{i=0}^{\infty} f_i(x)


.. code-block:: python
   :linenos:

   import pandas as pd
   import numpy as np

   df = pd.DataFrame(np.random.randn(100, 5))



